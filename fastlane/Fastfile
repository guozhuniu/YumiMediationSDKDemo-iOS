# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.24.0"

default_platform :ios

platform :ios do
  # desc "Runs all the tests"
  # lane :test do
  #   scan
  # end

  desc "Submit a new Beta Build to HockeyApp"
  lane :beta do
    next if ENV["TRAVIS_PULL_REQUEST"] != "false" or ENV["TRAVIS_BRANCH"] != "beta"

    keychain_name = "YumiMediationSDKExample-certs"
    keychain_password = SecureRandom.base64

    create_keychain(
      name: keychain_name,
      default_keychain: true,
      unlock: true,
      password: keychain_password,
      timeout: 3600
    )

    import_certificate(
      log_output: true,
      certificate_path: "fastlane/Certificates/ZplayAds_Distribute.p12",
      certificate_password: ENV["KEY_PASSWORD"],
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )

    increment_build_number_in_plist(target: 'YumiMediationSDKDemo')
    increment_version_number_in_plist(
    target: 'YumiMediationSDKDemo',
    version_number: "3.3.4"
    )

    # Build
    gym(
      scheme: "YumiMediationSDKDemo",
      workspace: "YumiMediationSDKDemo.xcworkspace",
      configuration: "Release",
      clean: true,
      include_bitcode: false,
      include_symbols: true,
      export_method: "enterprise"
    )

    # Push to pgyer
    pgyer(
      api_key: "9a57e69885455c0dd7c80c02f6d438a5", 
      user_key: "542c17f75a2e4ab32af8ad236fbd6739",
      update_description: "update by fastlane"
    )

    # Push to HockeyApp
    hockey(
      api_token: "e4b2db23aced4eb7abbe540b925f64ec",
      public_identifier: 'b1ec3f8648fb479f9c4666c4edc97004',
      notify: "1",
      status: "2",
      commit_sha: ENV["TRAVIS_COMMIT"],
      notes: ENV["TRAVIS_COMMIT_MESSAGE"],
    )

    delete_keychain(
      name: keychain_name
    )
  end

  desc "push archived files to oss"
  lane :pushOss do
    next if ENV["TRAVIS_PULL_REQUEST"] != "false" or ENV["TRAVIS_BRANCH"] != "pushOss"
    sdkVersion = "YumiMediationSDK_v"+ ENV["TRAVIS_TAG"]
    thirdPartys = ['AdColony','AdMob','Applovin','Baidu','Centrixlink','Chartboost','Domob','Facebook','GDT','InMobi','IronSource','Mobvista','StartApp','Unity','Vungle','OneWay','TouTiao']
    podDir = '../Pods/'
    mediationSDKPath = podDir + sdkVersion
    thirdPartyPathName = mediationSDKPath +'/YumiMediationThirdPartys'
    debugcenterPathName = mediationSDKPath +'/YumiMediationDebugCenter-iOS'
    yumiMediationSDKPathName = mediationSDKPath +'/YumiMediationSDK'
    iOSDownloadPage =  mediationSDKPath + "/iOSDownloadPage.md"

    fastlane_require "aliyun/oss"
    fastlane_require "retries"
    fastlane_require 'fileutils'
    
    Dir.chdir("#{podDir}") do
      FileUtils.mkdir_p "#{sdkVersion}/YumiMediationThirdPartys"
      sh "touch #{iOSDownloadPage}"

      #mediationSDK
      puts "is copying SDK"
      srcYumiMediationSDKPath = podDir + 'YumiMediationSDK'
      FileUtils.mv(srcYumiMediationSDKPath,mediationSDKPath + "/YumiMediationSDK")
      sdkSource = "YumiMediationSDK-iOS.tar.bz2"
      sdkRemoteAddress = "http://adsdk.yumimobi.com/iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{sdkSource}"
      File.open(iOSDownloadPage,"a") do |file|
      	file.puts("SDK Version" + "#{ENV["TRAVIS_TAG"]")
        file.puts("[YumiMediationSDK-iOS](#{sdkRemoteAddress})")
        file.puts(" ")
      end
      Dir.chdir("#{sdkVersion}") do
        #compress and upload to oss
        sh "tar cjf #{sdkSource} YumiMediationSDK"
        with_retries(max_tries: 10) do
          Aliyun::OSS::Client.new(
            :endpoint => "http://oss-cn-beijing.aliyuncs.com",
            :access_key_id => ENV["OSS_KEY_ID"],
            :access_key_secret => ENV["OSS_KEY_SECRET"]
          ).
          get_bucket("ad-sdk").
          put_object("iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{sdkSource}", :file => sdkSource)
        end
      end

      #debugCenter
      puts "is copying debugCenter"
      srcDebugcenterPath = podDir + 'YumiMediationDebugCenter-iOS'
      FileUtils.mv(srcDebugcenterPath,mediationSDKPath + "/YumiMediationDebugCenter-iOS")
      debugCenterSource = "YumiMediationDebugCenter-iOS.tar.bz2"
      debugRemoteAddress = "http://adsdk.yumimobi.com/iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{debugCenterSource}"
      File.open(iOSDownloadPage,"a") do |file|
        file.puts("[YumiMediationDebugCenter-iOS](#{debugRemoteAddress})")
        file.puts(" ")
      end
      Dir.chdir("#{sdkVersion}") do
        #compress and upload to oss
        sh "tar cjf #{debugCenterSource} YumiMediationDebugCenter-iOS"
        with_retries(max_tries: 10) do
          Aliyun::OSS::Client.new(
            :endpoint => "http://oss-cn-beijing.aliyuncs.com",
            :access_key_id => ENV["OSS_KEY_ID"],
            :access_key_secret => ENV["OSS_KEY_SECRET"]
          ).
          get_bucket("ad-sdk").
          put_object("iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{debugCenterSource}", :file => debugCenterSource)
        end
      end

      #adapter
      thirdPartys.each do |thirdParty|
        puts "is copying #{thirdParty}"
        thirdYumiSDKName = 'Yumi' + thirdParty
	      thirdYumiMediationAdapterName = 'YumiMediation' + thirdParty
	      #copy adapters
	      srcAdapterPath = podDir + 'YumiMediationAdapters' + '/'+ thirdYumiMediationAdapterName
	      targetAdapterPath = thirdPartyPathName + '/'+ thirdYumiMediationAdapterName
	      srcThirdSDKPath = podDir + thirdYumiSDKName
        targetThirdSDKPath = thirdPartyPathName + '/'+ thirdYumiMediationAdapterName + '/' +thirdYumiSDKName

        FileUtils.mv(srcAdapterPath,targetAdapterPath)
        FileUtils.mv(srcThirdSDKPath,targetThirdSDKPath)
        
        thirdSource = "#{thirdYumiMediationAdapterName}.tar.bz2"
        remoteAddress = "http://adsdk.yumimobi.com/iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{thirdSource}"
        File.open(iOSDownloadPage, "a") do |file|
          file.puts("[#{thirdParty}](#{remoteAddress})")
          file.puts(" ")
        end
        Dir.chdir("#{sdkVersion}/YumiMediationThirdPartys") do
          # compress and upload to oss
          sh "tar cjf #{thirdSource} #{thirdYumiMediationAdapterName}"
          sh "rm -rf #{thirdYumiMediationAdapterName}"
          with_retries(max_tries: 10) do
            Aliyun::OSS::Client.new(
              :endpoint => "http://oss-cn-beijing.aliyuncs.com",
              :access_key_id => ENV["OSS_KEY_ID"],
              :access_key_secret => ENV["OSS_KEY_SECRET"]
            ).
            get_bucket("ad-sdk").
            put_object("iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{thirdSource}", :file => thirdSource)
          end
        end
      end

      allThirdPartysSource = "allThirdPartys.tar.bz2"
      remoteAllThirdPartysAddress = "http://adsdk.yumimobi.com/iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{allThirdPartysSource}"
      File.open(iOSDownloadPage, "a") do |file|
        file.puts("[allThirdPartys](#{remoteAllThirdPartysAddress})")
        file.puts(" ")
      end
      Dir.chdir(sdkVersion) do
        sh "tar cjf #{allThirdPartysSource} YumiMediationThirdPartys"
        with_retries(max_tries: 10) do
          Aliyun::OSS::Client.new(
            :endpoint => "http://oss-cn-beijing.aliyuncs.com",
            :access_key_id => ENV["OSS_KEY_ID"],
            :access_key_secret => ENV["OSS_KEY_SECRET"]
          ).
          get_bucket("ad-sdk").
          put_object("iOS/Archived/#{ENV["TRAVIS_TAG"]}/#{allThirdPartysSource}", :file => allThirdPartysSource)
        end
      end
      FileUtils.mv(iOSDownloadPage,"../docs/iOSDownloadPage.md")
    end
    


  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
